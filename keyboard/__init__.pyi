from typing import Callable, Any, Optional, List, Union

def write(text: str, delay: float = ...) -> None: ...
def read_event(suppress: bool = ..., timeout: float = ...) -> Any: ...
def read_key(suppress: bool = ..., timeout: float = ...) -> str: ...
def press(hotkey: str) -> None: ...
def release(hotkey: str) -> None: ...
def send(hotkey: str, do_press: bool = ..., do_release: bool = ...) -> None: ...
def is_pressed(hotkey: str) -> bool: ...
def wait(hotkey: str = ...) -> None: ...
def record(until: Union[str, Callable[[], bool]]) -> List[Any]: ...
def play(events: List[Any], speed_factor: float = ...) -> None: ...
def add_hotkey(hotkey: str, callback: Callable[..., Any], args: Optional[List[Any]] = ..., suppress: bool = ...) -> None: ...
def remove_hotkey(hotkey: str) -> None: ...
def clear_all_hotkeys() -> None: ...
def unhook_all() -> None: ...
def hook(callback: Callable[[Any], None]) -> None: ...
def unhook(callback: Callable[[Any], None]) -> None: ...
def get_typed_strings(events: List[Any]) -> List[str]: ...
